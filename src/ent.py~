# Entity class to hold information about entities for 38Engine
# Sushil Louis

import ogre.renderer.OGRE as ogre
Quaternion = ogre.Quaternion

import random
import command

from vector        import Vector3
from physics       import ShipPhysics
from physics       import ProjectilePhysics
from render        import ShipRenderer
from render        import ProjectileRenderer
from render        import ObstacleRenderer
from unitAI        import UnitAI
from collision     import Collision

#-----------------------------------------------------------------------------------------
class Entity:
    aspectTypes = []
    
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        self.engine = engine
        self.uiname = str(id)
        self.eid = id
        
        self.pos = pos
        self.orientation = orientation
        self.vel = vel
        self.speed = vel.length()
        
        self.aspects = []

    def init(self):
        self.initAspects()

    def initAspects(self):
        for aspType in self.aspectTypes:
            self.aspects.append(aspType(self))
        
    def tick(self, dtime):
        for aspect in self.aspects:
            aspect.tick(dtime)

    def __str__(self):
        x = "--------------------\nEntity: %s \nPos: %s, Vel: %s,  mesh = %s\nSpeed: %f, desiredSpeed: %f" % (self.uiname, str(self.pos), str(self.vel), self.mesh, self.speed, self.desiredSpeed)
        return x
#-----------------------------------------------------------------------------------------
class GenericShip(Entity):
    aspectTypes = [ShipPhysics, ShipRenderer, UnitAI]
    
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        Entity.__init__(self, engine, id, pos, orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0))
        self.uiname = 'generic_ship' + str(id)

        self.orientation = Quaternion()
        self.orientation.FromAngleAxis(ogre.Degree(0), Vector3(0, 0, 1))

        # Movement
        self.acceleration = 0.0
        self.turningRate  = 0.0
        self.maxSpeed = 0.0
        self.desiredSpeed = 0.0
        self.yawRate = 0.0
        self.pitchRate = 0.0
        self.speed = 0.0
        
        self.scale = Vector3(1,1,1)
        
        # Control
        self.isPlayerControlled = False
        self.command = None
        
        # Other ship related data
        self.isTargeted = False
        self.health = 100.0
        self.energy = 100.0
        self.fireRate = 10.0
        self.fireTimer = 0.0
        self.canFire = True
        self.attackRange = 1000
        self.collideRadius = 500
        self.respawnTime = 10.0
        self.respawnTimer = 0.0
        self.killPoints = 0.0
        
    def tick(self, dtime):
        Entity.tick(self, dtime)
        if self.fireTimer < self.fireRate and not self.canFire:
            self.fireTimer += dtime
        else:
            self.fireTimer = 0
            self.canFire = True
        
        # Respawning
        if not self.isPlayerControlled and self.health <= 0:
            self.respawnTimer += dtime
            if self.respawnTimer > self.respawnTime:
                self.respawnTimer = 0
                
                # Respawn the ship somewhere around the escort ship
                self.health = self.maxHealth
                self.pos = self.engine.entityMgr.escortShip.pos + ogre.Vector3(random.randint(-600, 600), random.randint(-600, 600), random.randint(-600, 600))
                self.command = command.Chase(self, random.choice([self.engine.entityMgr.playerObject, self.engine.entityMgr.escortShip]))

class PlayerShip(GenericShip):
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        GenericShip.__init__(self, engine, id, pos, orientation, vel)
        self.mesh = 'Navitas.mesh'
        self.uiname = 'player' + str(id)

        self.orientation = Quaternion()
        self.orientation.FromAngleAxis(0, Vector3(0, 0, 1))

        # Movement
        self.acceleration = 20.0
        self.turningRate  = 3.14/3.0
        self.maxSpeed = 250.0
        self.desiredSpeed = 0.0
        self.yawRate = 0.0
        self.pitchRate = 0.0
        self.speed = 0.0
        
        self.scale = Vector3(7,7,7)
        
        # Control
        self.isPlayerControlled = True
        self.command = None
        
        # Other ship related data
        self.isTargeted = False
        self.health = 500.0
        self.maxHealth = 500.0
        self.energy = 100.0
        self.maxEnergy = 100.0
        self.fireRate = 0.5
        self.fireTimer = 0.0
        self.canFire = True
        self.collideRadius = 50
        self.score = 0

class EnemyFighter(GenericShip):
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        GenericShip.__init__(self, engine, id, pos, orientation, vel)
        self.mesh = 'EnemyFighter.mesh'
        self.uiname = 'enemy' + str(id)

        self.orientation = Quaternion()
        self.orientation.FromAngleAxis(0, Vector3(0, 0, 1))

        # Movement
        self.acceleration = 20.0
        self.turningRate  = 20.0
        self.maxSpeed = 150.0
        self.desiredSpeed = 0.0
        self.yawRate = 0.0
        self.pitchRate = 0.0
        self.speed = 0.0
        
        self.scale = Vector3(2,2,2)
        
        # Control
        self.isPlayerControlled = False
        self.command = None
        
        # Other ship related data
        self.isTargeted = False
        self.health = 100.0
        self.maxHealth = 100.0
        self.energy = 100.0
        self.maxEnergy = 100.0
        self.fireRate = 4.0
        self.fireTimer = 0.0
        self.canFire = True
        self.attackRange = 1000
        self.collideRadius = 40
        self.killPoints = 50
        self.respawnTime = 20.0
        self.respawnTimer = 0.0
        
class EscortShip(GenericShip):
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        GenericShip.__init__(self, engine, id, pos, orientation, vel)
        self.mesh = 'EscortShip.mesh'
        self.uiname = 'escort' + str(id)

        self.orientation = Quaternion()
        self.orientation.FromAngleAxis(0, Vector3(0, 0, 1))

        # Movement
        self.acceleration = 10.0
        self.turningRate  = 10.0
        self.maxSpeed = 20.0
        self.desiredSpeed = 0.0
        self.yawRate = 0.0
        self.pitchRate = 0.0
        self.speed = 0.0
        
        self.scale = Vector3(25,25,25)
        
        # Control
        self.isPlayerControlled = False
        self.command = None
        
        # Other ship related data
        self.isTargeted = False
        self.health = 2500.0
        self.maxHealth = 2500.0
        self.energy = 100.0
        self.maxEnergy = 100.0
        self.fireRate = 10.0
        self.fireTimer = 0.0
        self.canFire = True
        self.collideRadius = 75
        self.killPoints = -1000
        self.respawnTime = 9999999999.0
        self.respawnTimer = 0.0
#-----------------------------------------------------------------------------------------
class GenericProjectile(Entity):
    aspectTypes = [ProjectilePhysics, Collision, ProjectileRenderer]
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        Entity.__init__(self, engine, id, pos, orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0))
        self.uiname = 'generic_projectile' + str(id)

        self.orientation = Quaternion()
        self.orientation.FromAngleAxis(ogre.Degree(0), Vector3(0, 0, 1))
        
        # Movement
        self.speed = 0.0
        
        self.scale = Vector3(1,1,1)
        
        # Other projectile related data
        self.collideRadius = 500 
        self.damage = 0
        self.lifeTime = 5.0
        self.lifeTimer = 0.0
        self.isActive = False
        self.oriented = False
        self.source = None
        
    def tick(self, dtime):
        Entity.tick(self, dtime)
        
        if self.lifeTimer < self.lifeTime and self.isActive:
            self.lifeTimer += dtime
        else:
            self.lifeTimer = 0.0
            self.isActive = False
        
    def fire(self, source):
        self.source = source
        self.orientation = source.orientation
        self.pos = source.pos
        self.isActive = True
        
class RailgunProjectile(GenericProjectile):
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        GenericProjectile.__init__(self, engine, id, pos, orientation, vel)
        self.mesh = 'sphere.mesh'
        self.uiname = 'railgun_bullet' + str(id)
        self.projType = 'railgunBullet'

        self.orientation = Quaternion()
        self.orientation.FromAngleAxis(0, Vector3(0, 0, 1))

        # Movement
        self.speed = 1600.0
        
        self.scale = Vector3(0.01,0.01,0.01)

        # Other projectile related data
        self.collideRadius = 2
        self.damage = 60
        self.lifeTime = 15.0
        self.timeTimer = 0.0
        self.isActive = False
        self.oriented = False
        self.source = None
        
class EnemyProjectile(GenericProjectile):
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        GenericProjectile.__init__(self, engine, id, pos, orientation, vel)
        self.mesh = 'sphere.mesh'
        self.uiname = 'enemy_bullet' + str(id)
        self.projType = 'enemyBullet'

        self.orientation = Quaternion()
        self.orientation.FromAngleAxis(0, Vector3(0, 0, 1))

        # Movement
        self.speed = 300.0 # IMPORTANT: Update this value in command.py if you change it!
        
        self.scale = Vector3(0.01,0.01,0.01)

        # Other projectile related data
        self.collideRadius = 2
        self.damage = 20
        self.lifeTime = 15.0
        self.timeTimer = 0.0
        self.isActive = False
        self.oriented = False
        self.source = None
#-----------------------------------------------------------------------------------------
class GenericObstacle(Entity):
    aspectTypes = [ObstacleRenderer]
    
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        Entity.__init__(self, engine, id, pos, orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0))
        self.uiname = 'generic_obstacle' + str(id)        
        self.scale = Vector3(1,1,1)

class WarpGate(GenericObstacle):
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        GenericObstacle.__init__(self, engine, id, pos, orientation, vel)
        
        self.mesh = "WarpGate.mesh"
        self.scale = Vector3(13,13,13)
        
class Asteroid(GenericObstacle):
    def __init__(self, engine, id, pos = Vector3(0,0,0), orientation = Quaternion(0,0,0,1), vel = Vector3(0,0,0)):
        GenericObstacle.__init__(self, engine, id, pos, orientation, vel)
        
        self.orientation = Quaternion(random.randrange(-3.14, 3.14), random.randrange(0, 6.28), random.randrange(0, 6.28), random.randrange(0, 6.28))
        
        self.mesh = "Asteroid.mesh"
        self.scale = Vector3(30,30,30)
        
