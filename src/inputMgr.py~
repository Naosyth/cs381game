# Input manager. Initialize and manage keyboard and mouse. Buffered and unbuffered input
import ogre.renderer.OGRE as ogre
import ogre.io.OIS as OIS

from vector import Vector3
from command       import *

import os

class InputMgr(OIS.KeyListener, OIS.MouseListener, OIS.JoyStickListener):
    def __init__(self, engine):
        self.engine = engine
        OIS.KeyListener.__init__(self)
        OIS.MouseListener.__init__(self)
        OIS.JoyStickListener.__init__(self)
        self.toggle = 0.0
        self.onAboutPage = False

    def init(self):
        windowHandle = 0
        renderWindow = self.engine.gfxMgr.root.getAutoCreatedWindow()
        windowHandle = renderWindow.getCustomAttributeUnsignedLong("WINDOW")
        paramList = [("WINDOW", str(windowHandle))]

        if os.name == "nt":
            t = [("w32_mouse","DISCL_FOREGROUND"), ("w32_mouse", "DISCL_NONEXCLUSIVE")]
        else:
            #t = [("x11_mouse_grab", "false"), ("x11_mouse_hide", "false")]
            t = [("x11_mouse_grab", "false"), ("x11_mouse_hide", "true")]

        paramList.extend(t)

        self.inputManager = OIS.createPythonInputSystem(paramList)
 
        # Now InputManager is initialized for use. Keyboard and Mouse objects
        # must still be initialized separately
        self.keyboard = None
        self.mouse    = None
        try:
            self.keyboard = self.inputManager.createInputObjectKeyboard(OIS.OISKeyboard, True)
            self.mouse = self.inputManager.createInputObjectMouse(OIS.OISMouse, True)
        except Exception, e:
            print "No Keyboard or mouse!!!!"
            raise e
        if self.keyboard:
            self.keyboard.setEventCallback(self)
        if self.mouse:
            self.mouse.setEventCallback(self)
        self.ms = self.mouse.getMouseState()
 
        import random
        self.randomizer = random
        self.randomizer.seed(None)
        
        print "Initialized Input Manager"
        self.crosslink()

    def crosslink(self):
        self.camera = self.engine.gfxMgr.camera
        self.camYawNode = self.engine.gfxMgr.camYawNode
        self.camPitchNode = self.engine.gfxMgr.camPitchNode

    def stop(self):
        self.inputManager.destroyInputObjectKeyboard(self.keyboard)
        self.inputManager.destroyInputObjectMouse(self.mouse)
        OIS.InputManager.destroyInputSystem(self.inputManager)
        self.inputManager = None
        
    def tick(self, dtime):
        self.toggle -= dtime
        self.keyboard.capture()
        self.mouse.capture()

        self.keyPressed(dtime)
        self.handleModifiers(dtime)

    def handleModifiers(self, dtime):
        self.leftShiftDown = self.keyboard.isKeyDown(OIS.KC_LSHIFT)
        self.leftCtrlDown = self.keyboard.isKeyDown(OIS.KC_LCONTROL)

    def keyPressed(self, evt):
        if self.keyboard.isKeyDown(OIS.KC_ESCAPE):
            self.engine.stop()
            
        if self.engine.overlayMgr.currentOverlay == "Splash":
            # Start game on enter or space
            if not self.onAboutPage and self.keyboard.isKeyDown(OIS.KC_UP) and self.toggle <= 0:
                self.toggle = 0.25
                self.engine.overlayMgr.selection = (self.engine.overlayMgr.selection-1)%2
            elif not self.onAboutPage and self.keyboard.isKeyDown(OIS.KC_DOWN) and self.toggle <= 0:
                
                self.engine.overlayMgr.selection = (self.engine.overlayMgr.selection+1)%2
            elif self.engine.overlayMgr.selection == 0 and self.keyboard.isKeyDown(OIS.KC_RETURN):
                self.engine.overlayMgr.showAboutPage = not self.engine.overlayMgr.showAboutPage
                self.onAboutPage = not self.onAboutPage
            elif self.engine.overlayMgr.selection == 1 and self.keyboard.isKeyDown(OIS.KC_RETURN):
                self.engine.gameMgr.loadLevel();
                self.engine.overlayMgr.setOverlay("Game")
                self.engine.startGame()
        elif self.engine.overlayMgr.currentOverlay == "Game":
            # Toggle in game help
            if self.toggle <= 0 and self.keyboard.isKeyDown(OIS.KC_F1):
                self.toggle = 0.25
                self.engine.overlayMgr.getOverlayByName("Game").showHelp = not self.engine.overlayMgr.getOverlayByName("Game").showHelp
                self.engine.paused = self.engine.overlayMgr.getOverlayByName("Game").showHelp
        return True

    def keyReleased(self, evt):
        return True
    
    # MouseListener
    def mouseMoved(self, evt):
        return True

    def mousePressed(self, evt, id):
        if self.engine.overlayMgr.currentOverlay == "Splash":
            pass
        elif self.engine.overlayMgr.currentOverlay == "Game":
            playerObject = self.engine.entityMgr.playerObject
            if id == OIS.MB_Left and playerObject.canFire:
                bullet = self.engine.entityMgr.getNextProjectile("railgunBullet")
                bullet.fire(playerObject)
                playerObject.canFire = False
                playerObject.energy -= playerObject.fireEnergyCost
            if id == OIS.MB_Right:
                pass # Future plans?
        return True

    def mouseReleased(self, evt, id):
        return True
    
       # JoystickListener
    def buttonPressed(self, evt, button):
        return True
    def buttonReleased(self, evt, button):
        return True
    def axisMoved(self, evt, axis):
        return True

